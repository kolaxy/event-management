version: "3.9"

volumes:
  event_postgres_data: {}
  grafana_storage: {}
  prometheus_data: {}

networks:
  event-link:

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/Dockerfile
    image: event_django_image:latest
    container_name: event_django_container
    volumes:
      - ./app:/app
    restart: always
    depends_on:
      - postgres
      - redis
    networks:
      - event-link
    env_file:
      - ./.env
    ports:
      - "8000:8000"

  postgres:
    image: "postgres:15.4-alpine3.18"
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - event_postgres_data:/var/lib/postgresql/data
    networks:
      - event-link

  redis:
    image: redis:7.2.1-alpine3.18
    container_name: event_redis_container
    restart: always
    networks:
      - event-link

  celeryworker:
    <<: *django
    image: event_celeryworker_image:latest
    container_name: event_celery_container
    env_file:
      - ./.env
    restart: always
    ports: []
    command: /start-celeryworker
    networks:
      - event-link
    depends_on:
      - postgres
      - redis

  flower:
    image: mher/flower:latest
    container_name: event_flower_container
    restart: always
    ports:
      - "5555:5555" 
    env_file:
      - ./.env
    networks:
      - event-link
    depends_on:
      - celeryworker

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_LOG_LEVEL=debug
    ports:
      - '3000:3000'
    volumes:
      - 'grafana_storage:/var/lib/grafana'
    networks:
      - event-link

  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - event-link